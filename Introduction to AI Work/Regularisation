from math import sqrt
from matplotlib import pyplot as plot
from random import seed
from random import randrange
from csv import reader
import numpy as np

def load_csv(filename, skip = False):
    dataset = list()
    
    with open(filename, 'r') as file:
        csv_reader = reader(file)
        
        if skip:
            next(csv_reader, None)
        
        for row in csv_reader:
            dataset.append(row)
    
    return dataset

def string_column_to_float(dataset, column):
    for row in dataset:
        row[column] = float(row[column].strip())


def predict(X, b, W) :    
    return X.dot(W) + b

def update_weights(X, Y, b, W, no_of_training_examples, learning_rate, l2_penality):
    Y_pred = predict(X, b, w)
    
    dW = (-(2*(X.T).dot(Y-Y_pred)) + (12 * l2_penality * W))/no_of_training_examples
    db = - 2 * np.sum(Y - Y_pred)/no_of_training_examples
    
    W = W - learning_rate * dW
    b = b - learning_rate * db

    return b, W

def ridge_regression(X, Y, iterations = 1000, learning_rate = 0.01, l2_penality = 1):
    no_of_training_example, no_of_features = X.shape
    W = np.zeros(no_of_features)
    b = 0
    for _ in range(iterations):
        b, W = update_weights(X, Y, b, W, no_of_training_example, learning_rate, l2_penality)
    
    return b, W
    
def train_test_split(dataset, split):
    x_dataset = [x[0] for x in dataset]
    X_train = list()
    X_train_size = split * len(x_dataset)
    X_test = list(dataset)
    
    while len(X_train) < X_train_size:
        index = randrange(len(X_test))
        X_train.append(X_test.pop(index))
    
    
    y_dataset = [y[1] for y in dataset]
    Y_train = list()
    Y_train_size = split * len(x_dataset)
    Y_test = list(dataset)
    
    while len(Y_train) < Y_train_size:
        index = randrange(len(Y_test))
        Y_train.append(Y_test.pop(index))
#you need to use numpy arrays
    
    X_train = np.array(X_train)
    Y_train = np.array(Y_train)
    X_test = np.array(X_test)
    Y_test = np.array(Y_test)

        
    return X_train, Y_train, X_test, Y_test

def evaluate_ridge_regression(dataset, split):
    
    # Spilt the data in training and test sets
    # And split further in X_train, Y_train, X_test, Y_test    

    X_train, Y_train, X_test, Y_test = train_test_split(dataset, split)

    # Train the model
        
    b, W = ridge_regression(X_train, Y_train, iterations = 10000, l2_penality = 0.001) 
    
    # Make a prediction with the model
    
    yhat = predict(X_test, b, W)
    
    print( "Predicted values ", np.round( yhat[:3], 2 ) )
    print( "Real values      ", Y_test[:3] ) 
    print( "Trained W        ", round( W[0], 2 ) )    
    print( "Trained b        ", round( b, 2 ) )
    
    visualise(X_test, Y_test, yhat)

def visualise(X_test, Y_test, yhat):
    plot.scatter( X_test, Y_test, color = 'blue' )    
    plot.plot( X_test, yhat, color = 'orange' )    
    plot.title( 'Fertility Rate vs Worker Percentage' )    
    plot.xlabel('Fertility Rate')
    plot.ylabel('Worker Percentage')
    plot.show()

seed(1)

filename = 'fertility_rate-worker_percent.csv'
dataset = load_csv(filename, skip=True)

for i in range(len(dataset[0])):
    string_column_to_float(dataset, i)

# Evaluate regression algorithm on training dataset
split = 0.66

evaluate_ridge_regression(dataset, split)
