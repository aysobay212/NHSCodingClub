import math

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

def FWSP(G):
    number_of_nodes = G.number_of_nodes()

    #Use following if nodes are not integers
    mapping_dictionary = {}
    value = 0
    for node in G.nodes:
        mapping_dictionary[node] = value
        value += 1

    #intialises matrix of VxV dimensions with value of inf
    distance_matrix = []
    for x in range(number_of_nodes):
        temp_list = []
        for y in range(number_of_nodes):
            if x == y:
                temp_list.append(0)
            else:
                temp_list.append(math.inf)
        distance_matrix.append(temp_list)
    edges = [e for e in G.edges(data=True)] #gets edge list in a list coordinate form
    #print(edges[0][0], edges[0][1])
    print(edges)

    #initialises with weights
    for e in edges:
        distance_matrix[mapping_dictionary[e[0]]][mapping_dictionary[e[1]]] = e[2]['weight']
    print(edges)
    for k in G.nodes:
        for i in G.nodes:
            for j in G.nodes:
                current_distance = distance_matrix[mapping_dictionary[i]][mapping_dictionary[k]] + distance_matrix[mapping_dictionary[k]][mapping_dictionary[j]]
                print(current_distance)
                print(distance_matrix[mapping_dictionary[i]][mapping_dictionary[j]])
                print("\n")
                if distance_matrix[mapping_dictionary[i]][mapping_dictionary[j]] > current_distance:
                   distance_matrix[mapping_dictionary[i]][mapping_dictionary[j]] = current_distance

    #prints matrix in a nice way
    for x in distance_matrix:
        print(x)






# node_list is a dictionary with its key being the name, and the associated values
# being the node's attributes
# edge_list is a list which stores two nodes per item and its corresponding weight
node_list = ['A', 'B', 'C', 'D', 'E']
weighted_edge_list = [('A', 'B', 10), ('A', 'D', 5), ('B', 'C', 5), ('B', 'D', 5), ('B', 'E', 10), ('D', 'E', 20),
                      ('B', 'A', 10), ('D', 'A', 5), ('C', 'B', 5), ('D', 'B', 5), ('E', 'B', 10), ('E', 'D', 20)]

# create graph template
G = nx.DiGraph()

G.add_nodes_from(node_list)
G.add_weighted_edges_from(weighted_edge_list)

pos = nx.spring_layout(G)

nx.draw_networkx_nodes(G, pos, node_color='lightblue', node_size=550)  # node color and size
nx.draw_networkx_labels(G, pos)  # node label?
nx.draw_networkx_edges(G, pos, edge_color='darkblue', width=2)  # edge color and width

# edge labels
edge_labels = dict([((u, v), d["weight"])
                    for u, v, d in G.edges(data=True)])
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
plt.axis("off")
plt.show()

FWSP(G)
